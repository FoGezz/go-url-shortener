// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/storage/storage_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShortenerStorage is a mock of ShortenerStorage interface.
type MockShortenerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerStorageMockRecorder
}

// MockShortenerStorageMockRecorder is the mock recorder for MockShortenerStorage.
type MockShortenerStorageMockRecorder struct {
	mock *MockShortenerStorage
}

// NewMockShortenerStorage creates a new mock instance.
func NewMockShortenerStorage(ctrl *gomock.Controller) *MockShortenerStorage {
	mock := &MockShortenerStorage{ctrl: ctrl}
	mock.recorder = &MockShortenerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerStorage) EXPECT() *MockShortenerStorageMockRecorder {
	return m.recorder
}

// AddLink mocks base method.
func (m *MockShortenerStorage) AddLink(full, short string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLink", full, short)
}

// AddLink indicates an expected call of AddLink.
func (mr *MockShortenerStorageMockRecorder) AddLink(full, short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockShortenerStorage)(nil).AddLink), full, short)
}

// GetByFull mocks base method.
func (m *MockShortenerStorage) GetByFull(f string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFull", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByFull indicates an expected call of GetByFull.
func (mr *MockShortenerStorageMockRecorder) GetByFull(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFull", reflect.TypeOf((*MockShortenerStorage)(nil).GetByFull), f)
}

// GetByShort mocks base method.
func (m *MockShortenerStorage) GetByShort(s string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShort", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByShort indicates an expected call of GetByShort.
func (mr *MockShortenerStorageMockRecorder) GetByShort(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShort", reflect.TypeOf((*MockShortenerStorage)(nil).GetByShort), s)
}

// LoadFromJSONFile mocks base method.
func (m *MockShortenerStorage) LoadFromJSONFile(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromJSONFile", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFromJSONFile indicates an expected call of LoadFromJSONFile.
func (mr *MockShortenerStorageMockRecorder) LoadFromJSONFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromJSONFile", reflect.TypeOf((*MockShortenerStorage)(nil).LoadFromJSONFile), path)
}

// SaveJSONToFile mocks base method.
func (m *MockShortenerStorage) SaveJSONToFile(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveJSONToFile", path)
}

// SaveJSONToFile indicates an expected call of SaveJSONToFile.
func (mr *MockShortenerStorageMockRecorder) SaveJSONToFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJSONToFile", reflect.TypeOf((*MockShortenerStorage)(nil).SaveJSONToFile), path)
}
